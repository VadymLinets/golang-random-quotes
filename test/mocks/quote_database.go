// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"quote/pkg/database"

	mock "github.com/stretchr/testify/mock"
)

// NewQuoteDatabase creates a new instance of QuoteDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuoteDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuoteDatabase {
	mock := &QuoteDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// QuoteDatabase is an autogenerated mock type for the Database type
type QuoteDatabase struct {
	mock.Mock
}

type QuoteDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *QuoteDatabase) EXPECT() *QuoteDatabase_Expecter {
	return &QuoteDatabase_Expecter{mock: &_m.Mock}
}

// GetQuote provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) GetQuote(ctx context.Context, quoteID string) (database.Quote, error) {
	ret := _mock.Called(ctx, quoteID)

	if len(ret) == 0 {
		panic("no return value specified for GetQuote")
	}

	var r0 database.Quote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (database.Quote, error)); ok {
		return returnFunc(ctx, quoteID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) database.Quote); ok {
		r0 = returnFunc(ctx, quoteID)
	} else {
		r0 = ret.Get(0).(database.Quote)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, quoteID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// QuoteDatabase_GetQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuote'
type QuoteDatabase_GetQuote_Call struct {
	*mock.Call
}

// GetQuote is a helper method to define mock.On call
//   - ctx
//   - quoteID
func (_e *QuoteDatabase_Expecter) GetQuote(ctx interface{}, quoteID interface{}) *QuoteDatabase_GetQuote_Call {
	return &QuoteDatabase_GetQuote_Call{Call: _e.mock.On("GetQuote", ctx, quoteID)}
}

func (_c *QuoteDatabase_GetQuote_Call) Run(run func(ctx context.Context, quoteID string)) *QuoteDatabase_GetQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *QuoteDatabase_GetQuote_Call) Return(quote database.Quote, err error) *QuoteDatabase_GetQuote_Call {
	_c.Call.Return(quote, err)
	return _c
}

func (_c *QuoteDatabase_GetQuote_Call) RunAndReturn(run func(ctx context.Context, quoteID string) (database.Quote, error)) *QuoteDatabase_GetQuote_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuotes provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) GetQuotes(ctx context.Context, userID string) ([]database.Quote, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetQuotes")
	}

	var r0 []database.Quote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]database.Quote, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []database.Quote); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Quote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// QuoteDatabase_GetQuotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuotes'
type QuoteDatabase_GetQuotes_Call struct {
	*mock.Call
}

// GetQuotes is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *QuoteDatabase_Expecter) GetQuotes(ctx interface{}, userID interface{}) *QuoteDatabase_GetQuotes_Call {
	return &QuoteDatabase_GetQuotes_Call{Call: _e.mock.On("GetQuotes", ctx, userID)}
}

func (_c *QuoteDatabase_GetQuotes_Call) Run(run func(ctx context.Context, userID string)) *QuoteDatabase_GetQuotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *QuoteDatabase_GetQuotes_Call) Return(quotes []database.Quote, err error) *QuoteDatabase_GetQuotes_Call {
	_c.Call.Return(quotes, err)
	return _c
}

func (_c *QuoteDatabase_GetQuotes_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]database.Quote, error)) *QuoteDatabase_GetQuotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetSameQuote provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) GetSameQuote(ctx context.Context, userID string, viewedQuote database.Quote) (database.Quote, error) {
	ret := _mock.Called(ctx, userID, viewedQuote)

	if len(ret) == 0 {
		panic("no return value specified for GetSameQuote")
	}

	var r0 database.Quote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, database.Quote) (database.Quote, error)); ok {
		return returnFunc(ctx, userID, viewedQuote)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, database.Quote) database.Quote); ok {
		r0 = returnFunc(ctx, userID, viewedQuote)
	} else {
		r0 = ret.Get(0).(database.Quote)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, database.Quote) error); ok {
		r1 = returnFunc(ctx, userID, viewedQuote)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// QuoteDatabase_GetSameQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSameQuote'
type QuoteDatabase_GetSameQuote_Call struct {
	*mock.Call
}

// GetSameQuote is a helper method to define mock.On call
//   - ctx
//   - userID
//   - viewedQuote
func (_e *QuoteDatabase_Expecter) GetSameQuote(ctx interface{}, userID interface{}, viewedQuote interface{}) *QuoteDatabase_GetSameQuote_Call {
	return &QuoteDatabase_GetSameQuote_Call{Call: _e.mock.On("GetSameQuote", ctx, userID, viewedQuote)}
}

func (_c *QuoteDatabase_GetSameQuote_Call) Run(run func(ctx context.Context, userID string, viewedQuote database.Quote)) *QuoteDatabase_GetSameQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(database.Quote))
	})
	return _c
}

func (_c *QuoteDatabase_GetSameQuote_Call) Return(quote database.Quote, err error) *QuoteDatabase_GetSameQuote_Call {
	_c.Call.Return(quote, err)
	return _c
}

func (_c *QuoteDatabase_GetSameQuote_Call) RunAndReturn(run func(ctx context.Context, userID string, viewedQuote database.Quote) (database.Quote, error)) *QuoteDatabase_GetSameQuote_Call {
	_c.Call.Return(run)
	return _c
}

// GetView provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) GetView(ctx context.Context, userID string, quoteID string) (database.View, error) {
	ret := _mock.Called(ctx, userID, quoteID)

	if len(ret) == 0 {
		panic("no return value specified for GetView")
	}

	var r0 database.View
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (database.View, error)); ok {
		return returnFunc(ctx, userID, quoteID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) database.View); ok {
		r0 = returnFunc(ctx, userID, quoteID)
	} else {
		r0 = ret.Get(0).(database.View)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, quoteID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// QuoteDatabase_GetView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetView'
type QuoteDatabase_GetView_Call struct {
	*mock.Call
}

// GetView is a helper method to define mock.On call
//   - ctx
//   - userID
//   - quoteID
func (_e *QuoteDatabase_Expecter) GetView(ctx interface{}, userID interface{}, quoteID interface{}) *QuoteDatabase_GetView_Call {
	return &QuoteDatabase_GetView_Call{Call: _e.mock.On("GetView", ctx, userID, quoteID)}
}

func (_c *QuoteDatabase_GetView_Call) Run(run func(ctx context.Context, userID string, quoteID string)) *QuoteDatabase_GetView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QuoteDatabase_GetView_Call) Return(view database.View, err error) *QuoteDatabase_GetView_Call {
	_c.Call.Return(view, err)
	return _c
}

func (_c *QuoteDatabase_GetView_Call) RunAndReturn(run func(ctx context.Context, userID string, quoteID string) (database.View, error)) *QuoteDatabase_GetView_Call {
	_c.Call.Return(run)
	return _c
}

// LikeQuote provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) LikeQuote(ctx context.Context, quoteID string) error {
	ret := _mock.Called(ctx, quoteID)

	if len(ret) == 0 {
		panic("no return value specified for LikeQuote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, quoteID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// QuoteDatabase_LikeQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikeQuote'
type QuoteDatabase_LikeQuote_Call struct {
	*mock.Call
}

// LikeQuote is a helper method to define mock.On call
//   - ctx
//   - quoteID
func (_e *QuoteDatabase_Expecter) LikeQuote(ctx interface{}, quoteID interface{}) *QuoteDatabase_LikeQuote_Call {
	return &QuoteDatabase_LikeQuote_Call{Call: _e.mock.On("LikeQuote", ctx, quoteID)}
}

func (_c *QuoteDatabase_LikeQuote_Call) Run(run func(ctx context.Context, quoteID string)) *QuoteDatabase_LikeQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *QuoteDatabase_LikeQuote_Call) Return(err error) *QuoteDatabase_LikeQuote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *QuoteDatabase_LikeQuote_Call) RunAndReturn(run func(ctx context.Context, quoteID string) error) *QuoteDatabase_LikeQuote_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsLiked provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) MarkAsLiked(ctx context.Context, userID string, quoteID string) error {
	ret := _mock.Called(ctx, userID, quoteID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsLiked")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, quoteID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// QuoteDatabase_MarkAsLiked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsLiked'
type QuoteDatabase_MarkAsLiked_Call struct {
	*mock.Call
}

// MarkAsLiked is a helper method to define mock.On call
//   - ctx
//   - userID
//   - quoteID
func (_e *QuoteDatabase_Expecter) MarkAsLiked(ctx interface{}, userID interface{}, quoteID interface{}) *QuoteDatabase_MarkAsLiked_Call {
	return &QuoteDatabase_MarkAsLiked_Call{Call: _e.mock.On("MarkAsLiked", ctx, userID, quoteID)}
}

func (_c *QuoteDatabase_MarkAsLiked_Call) Run(run func(ctx context.Context, userID string, quoteID string)) *QuoteDatabase_MarkAsLiked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QuoteDatabase_MarkAsLiked_Call) Return(err error) *QuoteDatabase_MarkAsLiked_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *QuoteDatabase_MarkAsLiked_Call) RunAndReturn(run func(ctx context.Context, userID string, quoteID string) error) *QuoteDatabase_MarkAsLiked_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsViewed provides a mock function for the type QuoteDatabase
func (_mock *QuoteDatabase) MarkAsViewed(ctx context.Context, userID string, quoteID string) error {
	ret := _mock.Called(ctx, userID, quoteID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsViewed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, quoteID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// QuoteDatabase_MarkAsViewed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsViewed'
type QuoteDatabase_MarkAsViewed_Call struct {
	*mock.Call
}

// MarkAsViewed is a helper method to define mock.On call
//   - ctx
//   - userID
//   - quoteID
func (_e *QuoteDatabase_Expecter) MarkAsViewed(ctx interface{}, userID interface{}, quoteID interface{}) *QuoteDatabase_MarkAsViewed_Call {
	return &QuoteDatabase_MarkAsViewed_Call{Call: _e.mock.On("MarkAsViewed", ctx, userID, quoteID)}
}

func (_c *QuoteDatabase_MarkAsViewed_Call) Run(run func(ctx context.Context, userID string, quoteID string)) *QuoteDatabase_MarkAsViewed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QuoteDatabase_MarkAsViewed_Call) Return(err error) *QuoteDatabase_MarkAsViewed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *QuoteDatabase_MarkAsViewed_Call) RunAndReturn(run func(ctx context.Context, userID string, quoteID string) error) *QuoteDatabase_MarkAsViewed_Call {
	_c.Call.Return(run)
	return _c
}
