// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	database "quote/pkg/database"

	mock "github.com/stretchr/testify/mock"
)

// QuoteapiDatabase is an autogenerated mock type for the Database type
type QuoteapiDatabase struct {
	mock.Mock
}

type QuoteapiDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *QuoteapiDatabase) EXPECT() *QuoteapiDatabase_Expecter {
	return &QuoteapiDatabase_Expecter{mock: &_m.Mock}
}

// SaveQuote provides a mock function with given fields: ctx, quote
func (_m *QuoteapiDatabase) SaveQuote(ctx context.Context, quote database.Quote) error {
	ret := _m.Called(ctx, quote)

	if len(ret) == 0 {
		panic("no return value specified for SaveQuote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Quote) error); ok {
		r0 = rf(ctx, quote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuoteapiDatabase_SaveQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveQuote'
type QuoteapiDatabase_SaveQuote_Call struct {
	*mock.Call
}

// SaveQuote is a helper method to define mock.On call
//   - ctx context.Context
//   - quote database.Quote
func (_e *QuoteapiDatabase_Expecter) SaveQuote(ctx interface{}, quote interface{}) *QuoteapiDatabase_SaveQuote_Call {
	return &QuoteapiDatabase_SaveQuote_Call{Call: _e.mock.On("SaveQuote", ctx, quote)}
}

func (_c *QuoteapiDatabase_SaveQuote_Call) Run(run func(ctx context.Context, quote database.Quote)) *QuoteapiDatabase_SaveQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Quote))
	})
	return _c
}

func (_c *QuoteapiDatabase_SaveQuote_Call) Return(_a0 error) *QuoteapiDatabase_SaveQuote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuoteapiDatabase_SaveQuote_Call) RunAndReturn(run func(context.Context, database.Quote) error) *QuoteapiDatabase_SaveQuote_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuoteapiDatabase creates a new instance of QuoteapiDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuoteapiDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuoteapiDatabase {
	mock := &QuoteapiDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
