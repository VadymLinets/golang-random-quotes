// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"quote/pkg/database"

	mock "github.com/stretchr/testify/mock"
)

// NewQuoteAPI creates a new instance of QuoteAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuoteAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuoteAPI {
	mock := &QuoteAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// QuoteAPI is an autogenerated mock type for the API type
type QuoteAPI struct {
	mock.Mock
}

type QuoteAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *QuoteAPI) EXPECT() *QuoteAPI_Expecter {
	return &QuoteAPI_Expecter{mock: &_m.Mock}
}

// GetRandomQuote provides a mock function for the type QuoteAPI
func (_mock *QuoteAPI) GetRandomQuote(ctx context.Context) (database.Quote, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuote")
	}

	var r0 database.Quote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (database.Quote, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) database.Quote); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(database.Quote)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// QuoteAPI_GetRandomQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuote'
type QuoteAPI_GetRandomQuote_Call struct {
	*mock.Call
}

// GetRandomQuote is a helper method to define mock.On call
//   - ctx
func (_e *QuoteAPI_Expecter) GetRandomQuote(ctx interface{}) *QuoteAPI_GetRandomQuote_Call {
	return &QuoteAPI_GetRandomQuote_Call{Call: _e.mock.On("GetRandomQuote", ctx)}
}

func (_c *QuoteAPI_GetRandomQuote_Call) Run(run func(ctx context.Context)) *QuoteAPI_GetRandomQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QuoteAPI_GetRandomQuote_Call) Return(quote database.Quote, err error) *QuoteAPI_GetRandomQuote_Call {
	_c.Call.Return(quote, err)
	return _c
}

func (_c *QuoteAPI_GetRandomQuote_Call) RunAndReturn(run func(ctx context.Context) (database.Quote, error)) *QuoteAPI_GetRandomQuote_Call {
	_c.Call.Return(run)
	return _c
}
