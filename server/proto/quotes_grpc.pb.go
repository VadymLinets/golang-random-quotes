// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.6
// source: quotes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Quotes_Heartbeat_FullMethodName           = "/Quotes/Heartbeat"
	Quotes_GetQuoteHandler_FullMethodName     = "/Quotes/GetQuoteHandler"
	Quotes_GetSameQuoteHandler_FullMethodName = "/Quotes/GetSameQuoteHandler"
	Quotes_LikeQuoteHandler_FullMethodName    = "/Quotes/LikeQuoteHandler"
)

// QuotesClient is the client API for Quotes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotesClient interface {
	Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetQuoteHandler(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*Quote, error)
	GetSameQuoteHandler(ctx context.Context, in *UserAndQuoteIDRequest, opts ...grpc.CallOption) (*Quote, error)
	LikeQuoteHandler(ctx context.Context, in *UserAndQuoteIDRequest, opts ...grpc.CallOption) (*Empty, error)
}

type quotesClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotesClient(cc grpc.ClientConnInterface) QuotesClient {
	return &quotesClient{cc}
}

func (c *quotesClient) Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Quotes_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotesClient) GetQuoteHandler(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*Quote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Quote)
	err := c.cc.Invoke(ctx, Quotes_GetQuoteHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotesClient) GetSameQuoteHandler(ctx context.Context, in *UserAndQuoteIDRequest, opts ...grpc.CallOption) (*Quote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Quote)
	err := c.cc.Invoke(ctx, Quotes_GetSameQuoteHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotesClient) LikeQuoteHandler(ctx context.Context, in *UserAndQuoteIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Quotes_LikeQuoteHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotesServer is the server API for Quotes service.
// All implementations must embed UnimplementedQuotesServer
// for forward compatibility
type QuotesServer interface {
	Heartbeat(context.Context, *Empty) (*Empty, error)
	GetQuoteHandler(context.Context, *UserIDRequest) (*Quote, error)
	GetSameQuoteHandler(context.Context, *UserAndQuoteIDRequest) (*Quote, error)
	LikeQuoteHandler(context.Context, *UserAndQuoteIDRequest) (*Empty, error)
	mustEmbedUnimplementedQuotesServer()
}

// UnimplementedQuotesServer must be embedded to have forward compatible implementations.
type UnimplementedQuotesServer struct {
}

func (UnimplementedQuotesServer) Heartbeat(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedQuotesServer) GetQuoteHandler(context.Context, *UserIDRequest) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuoteHandler not implemented")
}
func (UnimplementedQuotesServer) GetSameQuoteHandler(context.Context, *UserAndQuoteIDRequest) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSameQuoteHandler not implemented")
}
func (UnimplementedQuotesServer) LikeQuoteHandler(context.Context, *UserAndQuoteIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeQuoteHandler not implemented")
}
func (UnimplementedQuotesServer) mustEmbedUnimplementedQuotesServer() {}

// UnsafeQuotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotesServer will
// result in compilation errors.
type UnsafeQuotesServer interface {
	mustEmbedUnimplementedQuotesServer()
}

func RegisterQuotesServer(s grpc.ServiceRegistrar, srv QuotesServer) {
	s.RegisterService(&Quotes_ServiceDesc, srv)
}

func _Quotes_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quotes_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).Heartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quotes_GetQuoteHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).GetQuoteHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quotes_GetQuoteHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).GetQuoteHandler(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quotes_GetSameQuoteHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndQuoteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).GetSameQuoteHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quotes_GetSameQuoteHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).GetSameQuoteHandler(ctx, req.(*UserAndQuoteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quotes_LikeQuoteHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndQuoteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).LikeQuoteHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quotes_LikeQuoteHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).LikeQuoteHandler(ctx, req.(*UserAndQuoteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quotes_ServiceDesc is the grpc.ServiceDesc for Quotes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quotes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Quotes",
	HandlerType: (*QuotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Quotes_Heartbeat_Handler,
		},
		{
			MethodName: "GetQuoteHandler",
			Handler:    _Quotes_GetQuoteHandler_Handler,
		},
		{
			MethodName: "GetSameQuoteHandler",
			Handler:    _Quotes_GetSameQuoteHandler_Handler,
		},
		{
			MethodName: "LikeQuoteHandler",
			Handler:    _Quotes_LikeQuoteHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quotes.proto",
}
